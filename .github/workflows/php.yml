name: Unit Testing

on: [pull_request]

jobs:
  test-host:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Verify MySQL connection from host
        run: |
          sudo apt-get install -y mysql-client
          mysql --host 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -uroot -ppassword -e "SHOW DATABASES"

  test-container:
    runs-on: ubuntu-latest
    container:
      image: atk4/image:latest # https://github.com/atk4/image
    strategy:
      matrix:
        php: ['7.3']
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
          DB_DATABASE: db
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - uses: actions/checkout@v1
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.json') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - run: composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader
        if: steps.cache.outputs.cache-hit != 'true'

      - run: vendor/bin/phpunit --configuration phpunit-mysql-workflow.xml --coverage-text
#
#  build:
#    runs-on: ubuntu-linux
#    container:
#      image: php:${{ matrix.php }}-alpine
#    strategy:
#      #max-parallel: 6
#      matrix:
#        #operating-system: [ubuntu-latest]
#        #operating-system: [ubuntu-latest, windows-latest, macOS-latest]
#        php: ['7.3']
#
#    env:
#      DB_DATABASE: db
#      DB_USERNAME: root
#      DB_PASSWORD: password
#
#    services:
#      mysql:
#        image: mysql:5.7
#        env:
#          MYSQL_ALLOW_EMPTY_PASSWORD: false
#          MYSQL_ROOT_PASSWORD: password
#          MYSQL_DATABASE: db
#        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
#      postgres:
#        image: postgres:10-alpine
#        env:
#          POSTGRES_PASSWORD: password
#          POSTGRES_USER: root
#        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
#
#
#    steps:
#    - uses: actions/checkout@v1
#    - run: |
#        apk add \
#          unzip
#        echo 'memory_limit=-1' >> /usr/local/etc/php/php.ini
#        wget -qO - https://raw.githubusercontent.com/composer/getcomposer.org/fb22b78362d31c0d2bf516d1f8cdfd2745caa431/web/installer | php -- --install-dir=/usr/local/bin --filename=composer --quiet
#
#    - name: Install dependencies
#      run: composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader
#
#    - name: Test with phpunit and SQLite
#      run: vendor/bin/phpunit --configuration phpunit.xml --coverage-text
#
#    - name: Test with phpunit and MySQL
#      run: vendor/bin/phpunit --configuration phpunit-mysql-workflow.xml --coverage-text
#
#    - name: Merge logs
#      run: vendor/bin/phpcov merge build/logs/ --clover build/logs/cc.xml;
#
#    - name: Upload coverage to CodeCov
#      uses: codecov/codecov-action@v1
#      with:
#        token: ${{ secrets.CODECOV_TOKEN }} #required
#        file: build/logs/cc.xml
